// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DigiCertSharp.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Container for certificate details
    /// </summary>
    public partial class OrderDetailCertificateDetails
    {
        /// <summary>
        /// Initializes a new instance of the OrderDetailCertificateDetails
        /// class.
        /// </summary>
        public OrderDetailCertificateDetails()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrderDetailCertificateDetails
        /// class.
        /// </summary>
        /// <param name="orderId">Unique identifier for certificate
        /// order.</param>
        /// <param name="status">Status of order. Usually 'pending issuance' or
        /// 'issued'.</param>
        /// <param name="productName">Product name of order.</param>
        /// <param name="validity">Validity Period of order. Usually 1, 2 or 3
        /// Year(s).</param>
        /// <param name="isRenewal">Identifies the order as a renewal or new
        /// order. True if order is a renewal, false if order is new.</param>
        /// <param name="renewedOrderId">If this order is a renewal of a
        /// previous order, returns the previous order's id in this
        /// parameter</param>
        /// <param name="orgUnit">The OU field of the certificate.</param>
        /// <param name="businessUnit">The business unit that requested the
        /// certificate</param>
        /// <param name="commonName">The Common Name field of the
        /// certificate.</param>
        /// <param name="sans">A collection that contains one or more SANs, (if
        /// any).</param>
        /// <param name="orderDate">The date the original certificate was
        /// ordered. Format is d-M-Y</param>
        /// <param name="validFrom">The start date of the certificate's
        /// validity (if issued). Format is d-M-Y</param>
        /// <param name="validTill">The end date of the certificate's validity
        /// (if issued). Format is d-M-Y</param>
        /// <param name="serverType">The server software type of the
        /// order.</param>
        /// <param name="serverTypeName">Name of the server software type of
        /// the order.</param>
        /// <param name="siteSealToken">Eight-character site seal
        /// token.</param>
        public OrderDetailCertificateDetails(int? orderId = default(int?), string status = default(string), string productName = default(string), int? validity = default(int?), bool? isRenewal = default(bool?), int? renewedOrderId = default(int?), string orgUnit = default(string), string businessUnit = default(string), string commonName = default(string), IList<string> sans = default(IList<string>), string orderDate = default(string), string validFrom = default(string), string validTill = default(string), string serverType = default(string), string serverTypeName = default(string), string siteSealToken = default(string))
        {
            OrderId = orderId;
            Status = status;
            ProductName = productName;
            Validity = validity;
            IsRenewal = isRenewal;
            RenewedOrderId = renewedOrderId;
            OrgUnit = orgUnit;
            BusinessUnit = businessUnit;
            CommonName = commonName;
            Sans = sans;
            OrderDate = orderDate;
            ValidFrom = validFrom;
            ValidTill = validTill;
            ServerType = serverType;
            ServerTypeName = serverTypeName;
            SiteSealToken = siteSealToken;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier for certificate order.
        /// </summary>
        [JsonProperty(PropertyName = "order_id")]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or sets status of order. Usually 'pending issuance' or
        /// 'issued'.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets product name of order.
        /// </summary>
        [JsonProperty(PropertyName = "product_name")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or sets validity Period of order. Usually 1, 2 or 3 Year(s).
        /// </summary>
        [JsonProperty(PropertyName = "validity")]
        public int? Validity { get; set; }

        /// <summary>
        /// Gets or sets identifies the order as a renewal or new order. True
        /// if order is a renewal, false if order is new.
        /// </summary>
        [JsonProperty(PropertyName = "is_renewal")]
        public bool? IsRenewal { get; set; }

        /// <summary>
        /// Gets or sets if this order is a renewal of a previous order,
        /// returns the previous order's id in this parameter
        /// </summary>
        [JsonProperty(PropertyName = "renewed_order_id")]
        public int? RenewedOrderId { get; set; }

        /// <summary>
        /// Gets or sets the OU field of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "org_unit")]
        public string OrgUnit { get; set; }

        /// <summary>
        /// Gets or sets the business unit that requested the certificate
        /// </summary>
        [JsonProperty(PropertyName = "business_unit")]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Gets or sets the Common Name field of the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "common_name")]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or sets a collection that contains one or more SANs, (if any).
        /// </summary>
        [JsonProperty(PropertyName = "sans")]
        public IList<string> Sans { get; set; }

        /// <summary>
        /// Gets or sets the date the original certificate was ordered. Format
        /// is d-M-Y
        /// </summary>
        [JsonProperty(PropertyName = "order_date")]
        public string OrderDate { get; set; }

        /// <summary>
        /// Gets or sets the start date of the certificate's validity (if
        /// issued). Format is d-M-Y
        /// </summary>
        [JsonProperty(PropertyName = "valid_from")]
        public string ValidFrom { get; set; }

        /// <summary>
        /// Gets or sets the end date of the certificate's validity (if
        /// issued). Format is d-M-Y
        /// </summary>
        [JsonProperty(PropertyName = "valid_till")]
        public string ValidTill { get; set; }

        /// <summary>
        /// Gets or sets the server software type of the order.
        /// </summary>
        [JsonProperty(PropertyName = "server_type")]
        public string ServerType { get; set; }

        /// <summary>
        /// Gets or sets name of the server software type of the order.
        /// </summary>
        [JsonProperty(PropertyName = "server_type_name")]
        public string ServerTypeName { get; set; }

        /// <summary>
        /// Gets or sets eight-character site seal token.
        /// </summary>
        [JsonProperty(PropertyName = "site_seal_token")]
        public string SiteSealToken { get; set; }

    }
}
