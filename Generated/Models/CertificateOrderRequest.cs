// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DigiCertSharp.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CertificateOrderRequest
    {
        /// <summary>
        /// Initializes a new instance of the CertificateOrderRequest class.
        /// </summary>
        public CertificateOrderRequest()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateOrderRequest class.
        /// </summary>
        /// <param name="csr">Certificate Signing Request</param>
        /// <param name="validity">Certificate validity length in years. For EV
        /// certificates, only 1 and 2 year lengths are allowed.</param>
        /// <param name="orgName">Name of organization which owns common
        /// name.</param>
        /// <param name="orgAddr1">Address line 1 of the organization's
        /// address.</param>
        /// <param name="orgCity">City of organization's address.</param>
        /// <param name="orgState">State / Province of the organization's
        /// address.</param>
        /// <param name="orgZip">Zip or Postal code of the organization's
        /// address.</param>
        /// <param name="orgCountry">A two character, lowercase abbreviation
        /// for country. Possible values include: 'ad', 'ae', 'af', 'ag', 'ai',
        /// 'al', 'am', 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax',
        /// 'az', 'ba', 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bl',
        /// 'bm', 'bn', 'bo', 'bq', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz',
        /// 'ca', 'cc', 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn',
        /// 'co', 'cr', 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm',
        /// 'do', 'dz', 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'fi', 'fj',
        /// 'fk', 'fm', 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh',
        /// 'gi', 'gl', 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw',
        /// 'gy', 'hk', 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im',
        /// 'in', 'io', 'iq', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg',
        /// 'kh', 'ki', 'km', 'kn', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc',
        /// 'li', 'lk', 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md',
        /// 'me', 'mf', 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq',
        /// 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc',
        /// 'ne', 'nf', 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om',
        /// 'pa', 'pe', 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps',
        /// 'pt', 'pw', 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb',
        /// 'sc', 'se', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so',
        /// 'sr', 'ss', 'st', 'sv', 'sx', 'sz', 'tc', 'td', 'tf', 'tg', 'th',
        /// 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tr', 'tt', 'tv', 'tw', 'tz',
        /// 'ua', 'ug', 'um', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi',
        /// 'vn', 'vu', 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'</param>
        /// <param name="orgContactFirstname">First name of the organization
        /// contact.</param>
        /// <param name="orgContactLastname">Last name of the organization
        /// contact.</param>
        /// <param name="orgContactEmail">Email address of the organization
        /// contact.</param>
        /// <param name="orgContactTelephone">Telephone number of the
        /// organization contact.</param>
        /// <param name="commonName">The name to be secured in the certificate.
        /// Decoded from CSR if not provided.</param>
        /// <param name="sans">A comma delimited list of subject alternative
        /// names to be secured in the certificate. Adding SANs names incurs
        /// additional cost. Decoded from CSR if not provided.</param>
        /// <param name="serverType">See server types. Absent or invalid values
        /// default to Other.</param>
        /// <param name="orgUnit">This is the OU field to be included in the
        /// certificate.</param>
        /// <param name="orgAddr2">Address line 2 of the organization's
        /// address.</param>
        /// <param name="telephone">Main telephone number of the organization.
        /// Required for EV certificates.</param>
        /// <param name="orgContactJobTitle">Title of contact working at the
        /// organization.</param>
        /// <param name="orgContactTelephoneExt">Extension number of the
        /// organization contact.</param>
        public CertificateOrderRequest(string csr, int validity, string orgName, string orgAddr1, string orgCity, string orgState, string orgZip, string orgCountry, string orgContactFirstname, string orgContactLastname, string orgContactEmail, string orgContactTelephone, string commonName = default(string), string sans = default(string), double? serverType = default(double?), string orgUnit = default(string), string orgAddr2 = default(string), string telephone = default(string), string orgContactJobTitle = default(string), string orgContactTelephoneExt = default(string), bool? ev = default(bool?))
        {
            Csr = csr;
            Validity = validity;
            CommonName = commonName;
            Sans = sans;
            ServerType = serverType;
            OrgUnit = orgUnit;
            OrgName = orgName;
            OrgAddr1 = orgAddr1;
            OrgAddr2 = orgAddr2;
            OrgCity = orgCity;
            OrgState = orgState;
            OrgZip = orgZip;
            OrgCountry = orgCountry;
            Telephone = telephone;
            OrgContactJobTitle = orgContactJobTitle;
            OrgContactFirstname = orgContactFirstname;
            OrgContactLastname = orgContactLastname;
            OrgContactEmail = orgContactEmail;
            OrgContactTelephone = orgContactTelephone;
            OrgContactTelephoneExt = orgContactTelephoneExt;
            Ev = ev;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets certificate Signing Request
        /// </summary>
        [JsonProperty(PropertyName = "csr")]
        public string Csr { get; set; }

        /// <summary>
        /// Gets or sets certificate validity length in years. For EV
        /// certificates, only 1 and 2 year lengths are allowed.
        /// </summary>
        [JsonProperty(PropertyName = "validity")]
        public int Validity { get; set; }

        /// <summary>
        /// Gets or sets the name to be secured in the certificate. Decoded
        /// from CSR if not provided.
        /// </summary>
        [JsonProperty(PropertyName = "common_name")]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or sets a comma delimited list of subject alternative names to
        /// be secured in the certificate. Adding SANs names incurs additional
        /// cost. Decoded from CSR if not provided.
        /// </summary>
        [JsonProperty(PropertyName = "sans")]
        public string Sans { get; set; }

        /// <summary>
        /// Gets or sets see server types. Absent or invalid values default to
        /// Other.
        /// </summary>
        [JsonProperty(PropertyName = "server_type")]
        public double? ServerType { get; set; }

        /// <summary>
        /// Gets or sets this is the OU field to be included in the
        /// certificate.
        /// </summary>
        [JsonProperty(PropertyName = "org_unit")]
        public string OrgUnit { get; set; }

        /// <summary>
        /// Gets or sets name of organization which owns common name.
        /// </summary>
        [JsonProperty(PropertyName = "org_name")]
        public string OrgName { get; set; }

        /// <summary>
        /// Gets or sets address line 1 of the organization's address.
        /// </summary>
        [JsonProperty(PropertyName = "org_addr1")]
        public string OrgAddr1 { get; set; }

        /// <summary>
        /// Gets or sets address line 2 of the organization's address.
        /// </summary>
        [JsonProperty(PropertyName = "org_addr2")]
        public string OrgAddr2 { get; set; }

        /// <summary>
        /// Gets or sets city of organization's address.
        /// </summary>
        [JsonProperty(PropertyName = "org_city")]
        public string OrgCity { get; set; }

        /// <summary>
        /// Gets or sets state / Province of the organization's address.
        /// </summary>
        [JsonProperty(PropertyName = "org_state")]
        public string OrgState { get; set; }

        /// <summary>
        /// Gets or sets zip or Postal code of the organization's address.
        /// </summary>
        [JsonProperty(PropertyName = "org_zip")]
        public string OrgZip { get; set; }

        /// <summary>
        /// Gets or sets a two character, lowercase abbreviation for country.
        /// Possible values include: 'ad', 'ae', 'af', 'ag', 'ai', 'al', 'am',
        /// 'an', 'ao', 'aq', 'ar', 'as', 'at', 'au', 'aw', 'ax', 'az', 'ba',
        /// 'bb', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bl', 'bm', 'bn',
        /// 'bo', 'bq', 'br', 'bs', 'bt', 'bv', 'bw', 'by', 'bz', 'ca', 'cc',
        /// 'cd', 'cf', 'cg', 'ch', 'ci', 'ck', 'cl', 'cm', 'cn', 'co', 'cr',
        /// 'cv', 'cw', 'cx', 'cy', 'cz', 'de', 'dj', 'dk', 'dm', 'do', 'dz',
        /// 'ec', 'ee', 'eg', 'eh', 'er', 'es', 'et', 'fi', 'fj', 'fk', 'fm',
        /// 'fo', 'fr', 'ga', 'gb', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gl',
        /// 'gm', 'gn', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gw', 'gy', 'hk',
        /// 'hm', 'hn', 'hr', 'ht', 'hu', 'id', 'ie', 'il', 'im', 'in', 'io',
        /// 'iq', 'is', 'it', 'je', 'jm', 'jo', 'jp', 'ke', 'kg', 'kh', 'ki',
        /// 'km', 'kn', 'kr', 'kw', 'ky', 'kz', 'la', 'lb', 'lc', 'li', 'lk',
        /// 'lr', 'ls', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mf',
        /// 'mg', 'mh', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms',
        /// 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nc', 'ne', 'nf',
        /// 'ng', 'ni', 'nl', 'no', 'np', 'nr', 'nu', 'nz', 'om', 'pa', 'pe',
        /// 'pf', 'pg', 'ph', 'pk', 'pl', 'pm', 'pn', 'pr', 'ps', 'pt', 'pw',
        /// 'py', 'qa', 're', 'ro', 'rs', 'ru', 'rw', 'sa', 'sb', 'sc', 'se',
        /// 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sr', 'ss',
        /// 'st', 'sv', 'sx', 'sz', 'tc', 'td', 'tf', 'tg', 'th', 'tj', 'tk',
        /// 'tl', 'tm', 'tn', 'to', 'tr', 'tt', 'tv', 'tw', 'tz', 'ua', 'ug',
        /// 'um', 'us', 'uy', 'uz', 'va', 'vc', 've', 'vg', 'vi', 'vn', 'vu',
        /// 'wf', 'ws', 'ye', 'yt', 'za', 'zm', 'zw'
        /// </summary>
        [JsonProperty(PropertyName = "org_country")]
        public string OrgCountry { get; set; }

        /// <summary>
        /// Gets or sets main telephone number of the organization. Required
        /// for EV certificates.
        /// </summary>
        [JsonProperty(PropertyName = "telephone")]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or sets title of contact working at the organization.
        /// </summary>
        [JsonProperty(PropertyName = "org_contact_job_title")]
        public string OrgContactJobTitle { get; set; }

        /// <summary>
        /// Gets or sets first name of the organization contact.
        /// </summary>
        [JsonProperty(PropertyName = "org_contact_firstname")]
        public string OrgContactFirstname { get; set; }

        /// <summary>
        /// Gets or sets last name of the organization contact.
        /// </summary>
        [JsonProperty(PropertyName = "org_contact_lastname")]
        public string OrgContactLastname { get; set; }

        /// <summary>
        /// Gets or sets email address of the organization contact.
        /// </summary>
        [JsonProperty(PropertyName = "org_contact_email")]
        public string OrgContactEmail { get; set; }

        /// <summary>
        /// Gets or sets telephone number of the organization contact.
        /// </summary>
        [JsonProperty(PropertyName = "org_contact_telephone")]
        public string OrgContactTelephone { get; set; }

        /// <summary>
        /// Gets or sets extension number of the organization contact.
        /// </summary>
        [JsonProperty(PropertyName = "org_contact_telephone_ext")]
        public string OrgContactTelephoneExt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ev")]
        public bool? Ev { get; set; }

    }
}
